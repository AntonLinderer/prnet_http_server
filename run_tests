#!/usr/bin/env bash

if [[ $# -gt 1 || $# -eq 1 && "$1" != --use-docker ]]
then
    echo "Usage: $0 [--use-docker]"
    exit 1
fi

if [ "$1" == --use-docker ]
then
  start_server() {
    docker run --rm -d --name=prnet_http_server_testing \
	   -e PRNET_MAX_IMAGE_SIZE=20000 -p 8000:8000   \
	   prnet_http_server:latest
  }
  stop_server() {
    docker stop prnet_http_server_testing
  }
else
  start_server() {
    cd "$(dirname "$0")"
    PRNET_MAX_IMAGE_SIZE=20000 gunicorn prnet_wsgi:handle_request &
  }
  stop_server() {
    kill %1; wait
  }
fi

echo "Starting PRNet HTTP server..."
start_server
trap 'stop_server; echo "PRNet HTTP server was stoped"' EXIT
sleep 1

normalize()
{
    sed '1 { /^HTTP\/1\.1 100 Continue/ {N;d}; }; s/\r$//'|
    sed '1,/^$/ s/^\(Date\|Server\): .*/\1: ???/;
        /^$/ {
            N;N
            p
            s/.*/.../
            p
            N
            : repeat
            $q
            N
            s/[^\n]*\n//
            b repeat;
        }
        '
}

curl()
{
    command curl -sD - "$@"
}

let failure_count=0
check()
{
    echo "$@"
    diff -U10 - <("$@"|normalize) || let ++failure_count
}

# GET request
check curl http://localhost:8000 <<'END'
HTTP/1.1 405 Method Not Allowed
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST to a non root path
check curl -F abc=def http://localhost:8000/xyz <<'END'
HTTP/1.1 405 Method Not Allowed
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST without image
check curl -F abc=def http://localhost:8000 <<'END'
HTTP/1.1 400 Bad Request
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST with image not a file
check curl -F image=def http://localhost:8000 <<'END'
HTTP/1.1 400 Bad Request
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST without content length
check curl -F abc=def -H 'Content-Length:' http://localhost:8000 <<'END'
HTTP/1.1 411 Length Required
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST with an image exceeding the max size limit
check curl -F image=@test_data/large_image.jpg http://localhost:8000 <<'END'
HTTP/1.1 413 Payload Too Large
Server: ???
Date: ???
Connection: close
Content-Length: 0

END

# POST valid data
check curl -F image=@test_data/single_face.jpg http://localhost:8000 <<'END'
HTTP/1.1 200 OK
Server: ???
Date: ???
Connection: close
Content-Type: application/octet-stream
Content-Length: 5532078
Content-Disposition: attachment; filename="single_face.jpg.obj"

v 140.088378906 301.859646331 104.281578064 0.529411764706 0.388235294118 0.286274509804
v 142.88794424 303.291693857 107.830162048 0.478431372549 0.321568627451 0.219607843137
...
f 43866 43867 43806
f 43867 43807 43806
END

# POST non-image data
check curl -F image=@"$0" http://localhost:8000 <<'END'
HTTP/1.1 500 Internal Server Error
Server: ???
Date: ???
Connection: close
Content-Type: application/json
Content-Length: 52

{"error": "cannot identify image file 'run_tests'"}
END

# POST a faceless image
check curl -F image=@test_data/no_face.jpg http://localhost:8000 <<'END'
HTTP/1.1 500 Internal Server Error
Server: ???
Date: ???
Connection: close
Content-Type: application/json
Content-Length: 34

{"error": "No face in the image"}
END

test "$failure_count" -eq 0
